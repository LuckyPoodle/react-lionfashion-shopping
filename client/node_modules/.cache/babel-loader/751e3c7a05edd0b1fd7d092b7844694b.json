{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ruiqu\\\\myJavascript\\\\lionfashion\\\\src\\\\pages\\\\shop\\\\shop.component.jsx\";\nimport React from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport CollectionPage from '../collection/collection.component';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/fire.util';\nimport { updateCollections } from '../../redux/shop/shop.actions';\nconst CollectionsOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true\n    };\n    this.unsubscribeFromSnapshot = null;\n  }\n\n  //snapshot is gg to be the snapshot representation of our array\n  componentDidMount() {\n    const {\n      updateCollections\n    } = this.props;\n    const collectionRef = firestore.collection('collections');\n    collectionRef.get().then(snapshot => {\n      console.log(\"on Snapshot\");\n      const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n      updateCollections(collectionsMap);\n      console.log(\"SHOP COMPONENT DID MOUNT\");\n      console.log(collectionsMap);\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  render() {\n    const {\n      match\n    } = this.props;\n    const {\n      isLoading\n    } = this.state; //shop page is nested in a route in app.js\n    //in Route to COllECTIONPAGE, the path params name u use categoryId, so when accessing it u refer to it in mapstatetoprops of collection component\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`,\n      render: props => /*#__PURE__*/React.createElement(CollectionsOverviewWithSpinner, Object.assign({\n        isLoading: loadinh\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 58\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: `${match.path}/:categoryId`,\n      render: props => /*#__PURE__*/React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: isLoading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 22\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 5\n      }\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionsMap => dispatch(updateCollections(collectionsMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["C:/Users/ruiqu/myJavascript/lionfashion/src/pages/shop/shop.component.jsx"],"names":["React","Route","connect","CollectionsOverview","CollectionPage","WithSpinner","firestore","convertCollectionsSnapshotToMap","updateCollections","CollectionsOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","Component","state","loading","unsubscribeFromSnapshot","componentDidMount","props","collectionRef","collection","get","then","snapshot","console","log","collectionsMap","setState","render","match","isLoading","path","loadinh","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,QAAoB,kBAApB;AAEA,SAAQC,OAAR,QAAsB,aAAtB;AAIA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AAGA,SAAQC,SAAR,EAAkBC,+BAAlB,QAAwD,0BAAxD;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AAGA,MAAMC,8BAA8B,GAAEJ,WAAW,CAACF,mBAAD,CAAjD;AACA,MAAMO,yBAAyB,GAACL,WAAW,CAACD,cAAD,CAA3C;;AAGA,MAAMO,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAsC;AAAA;AAAA;AAAA,SAElCC,KAFkC,GAE5B;AACFC,MAAAA,OAAO,EAAC;AADN,KAF4B;AAAA,SAMlCC,uBANkC,GAMV,IANU;AAAA;;AAOlC;AAEAC,EAAAA,iBAAiB,GAAE;AAEf,UAAM;AAACR,MAAAA;AAAD,QAAoB,KAAKS,KAA/B;AACA,UAAMC,aAAa,GAACZ,SAAS,CAACa,UAAV,CAAqB,aAArB,CAApB;AACAD,IAAAA,aAAa,CAACE,GAAd,GAAoBC,IAApB,CAAyBC,QAAQ,IAAE;AAC/BC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,YAAMC,cAAc,GAAClB,+BAA+B,CAACe,QAAD,CAApD;AACAd,MAAAA,iBAAiB,CAACiB,cAAD,CAAjB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYC,cAAZ;AACA,WAAKC,QAAL,CAAc;AAACZ,QAAAA,OAAO,EAAC;AAAT,OAAd;AACH,KAPD;AAQH;;AAIDa,EAAAA,MAAM,GAAE;AACJ,UAAM;AAACC,MAAAA;AAAD,QAAQ,KAAKX,KAAnB;AACA,UAAM;AAACY,MAAAA;AAAD,QAAY,KAAKhB,KAAvB,CAFI,CAIH;AACL;;AACA,wBAGJ;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAa,MAAA,IAAI,EAAG,GAAEe,KAAK,CAACE,IAAK,EAAjC;AAAoC,MAAA,MAAM,EAAGb,KAAD,iBAAS,oBAAC,8BAAD;AAAgC,QAAA,SAAS,EAAEc;AAA3C,SAAwDd,KAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAG,GAAEW,KAAK,CAACE,IAAK,cAA3B;AACA,MAAA,MAAM,EAAGb,KAAD,iBAAS,oBAAC,yBAAD;AAA2B,QAAA,SAAS,EAAEY;AAAtC,SAAqDZ,KAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAHI;AAQI;;AAvC8B;;AA6CtC,MAAMe,kBAAkB,GAACC,QAAQ,KAAG;AAChCzB,EAAAA,iBAAiB,EAACiB,cAAc,IAAEQ,QAAQ,CAACzB,iBAAiB,CAACiB,cAAD,CAAlB;AADV,CAAH,CAAjC;;AAIA,eAAevB,OAAO,CAAC,IAAD,EAAM8B,kBAAN,CAAP,CAAiCrB,QAAjC,CAAf","sourcesContent":["import React from 'react';\r\nimport {Route} from 'react-router-dom';\r\n\r\nimport {connect} from 'react-redux';\r\n\r\n\r\n\r\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\r\nimport CollectionPage from '../collection/collection.component';\r\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\r\n\r\n\r\nimport {firestore,convertCollectionsSnapshotToMap} from '../../firebase/fire.util';\r\nimport { updateCollections } from '../../redux/shop/shop.actions';\r\n\r\n\r\nconst CollectionsOverviewWithSpinner =WithSpinner(CollectionsOverview);\r\nconst CollectionPageWithSpinner=WithSpinner(CollectionPage);\r\n\r\n\r\nclass ShopPage extends React.Component{\r\n\r\n    state={\r\n        loading:true\r\n    };\r\n\r\n    unsubscribeFromSnapshot=null;\r\n    //snapshot is gg to be the snapshot representation of our array\r\n\r\n    componentDidMount(){\r\n\r\n        const {updateCollections}=this.props;\r\n        const collectionRef=firestore.collection('collections');\r\n        collectionRef.get().then(snapshot=>{\r\n            console.log(\"on Snapshot\")\r\n            const collectionsMap=convertCollectionsSnapshotToMap(snapshot);\r\n            updateCollections(collectionsMap)\r\n            console.log(\"SHOP COMPONENT DID MOUNT\");\r\n            console.log(collectionsMap);\r\n            this.setState({loading:false})\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        const {match}=this.props;\r\n        const {isLoading}=this.state;\r\n\r\n         //shop page is nested in a route in app.js\r\n    //in Route to COllECTIONPAGE, the path params name u use categoryId, so when accessing it u refer to it in mapstatetoprops of collection component\r\n    return(\r\n    \r\n    \r\n<div className='shop-page'>\r\n    <Route exact path={`${match.path}`} render={(props)=><CollectionsOverviewWithSpinner isLoading={loadinh} {...props} />} />  \r\n    <Route path={`${match.path}/:categoryId`} \r\n    render={(props)=><CollectionPageWithSpinner isLoading={isLoading} {...props} />} />\r\n    \r\n</div>)}\r\n\r\n\r\n}\r\n\r\n\r\nconst mapDispatchToProps=dispatch=>({\r\n    updateCollections:collectionsMap=>dispatch(updateCollections(collectionsMap))\r\n})\r\n\r\nexport default connect(null,mapDispatchToProps)(ShopPage);"]},"metadata":{},"sourceType":"module"}