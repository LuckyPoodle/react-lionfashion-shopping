{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyCYrxCh-TEgeMFq3tXS6LlzxHEpOPVzDjE\",\n  authDomain: \"lionfashion.firebaseapp.com\",\n  databaseURL: \"https://lionfashion.firebaseio.com\",\n  projectId: \"lionfashion\",\n  storageBucket: \"lionfashion.appspot.com\",\n  messagingSenderId: \"810178059008\",\n  appId: \"1:810178059008:web:30157209dc7828c46331e5\",\n  measurementId: \"G-3M9KYVZE7X\"\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  /*query inside firestore to see if already exist*/\n\n  /*firebase will always return us a reference object and snapshot object even if nothing exists there*/\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log(\"error creating user\", error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndItems = (collectionKey, objectToAdd) => {\n  const collectionRef = firestore.collection(collectionKey); //batch write\n\n  const batch = firebase.batch();\n  objectToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef);\n  });\n};\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\n/*trigger google popup*/\n\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/ruiqu/myJavascript/lionfashion/src/firebase/fire.util.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","firestore","createUserProfileDocument","userAuth","additionalData","userRef","doc","uid","snapshot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndItems","collectionKey","objectToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAGA,MAAMC,MAAM,GACR;AACIC,EAAAA,MAAM,EAAE,yCADZ;AAEIC,EAAAA,UAAU,EAAE,6BAFhB;AAGIC,EAAAA,WAAW,EAAE,oCAHjB;AAIIC,EAAAA,SAAS,EAAE,aAJf;AAKIC,EAAAA,aAAa,EAAE,yBALnB;AAMIC,EAAAA,iBAAiB,EAAE,cANvB;AAOIC,EAAAA,KAAK,EAAE,2CAPX;AAQIC,EAAAA,aAAa,EAAE;AARnB,CADJ;AAaAT,QAAQ,CAACU,aAAT,CAAuBT,MAAvB;AAEA,OAAO,MAAMU,IAAI,GAACX,QAAQ,CAACW,IAAT,EAAX;AACP,OAAO,MAAMC,SAAS,GAACZ,QAAQ,CAACY,SAAT,EAAhB;AAEP,OAAO,MAAMC,yBAAyB,GAAC,OAAOC,QAAP,EAAgBC,cAAhB,KAAiC;AACtE,MAAI,CAACD,QAAL,EAAc;AAEd;;AACA;;AACA,QAAME,OAAO,GAACJ,SAAS,CAACK,GAAV,CAAe,SAAQH,QAAQ,CAACI,GAAI,EAApC,CAAd;AACA,QAAMC,QAAQ,GAAC,MAAMH,OAAO,CAACI,GAAR,EAArB;;AAEA,MAAG,CAACD,QAAQ,CAACE,MAAb,EAAoB;AAClB,UAAM;AAACC,MAAAA,WAAD;AAAaC,MAAAA;AAAb,QAAoBT,QAA1B;AACA,UAAMU,SAAS,GAAC,IAAIC,IAAJ,EAAhB;;AAEA,QAAG;AAED,YAAMT,OAAO,CAACU,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGT;AAJa,OAAZ,CAAN;AAOD,KATD,CASC,OAAMY,KAAN,EAAY;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAkCF,KAAK,CAACG,OAAxC;AAED;AACF;;AACD,SAAOd,OAAP;AAED,CA5BM;AA8BP,OAAO,MAAMe,qBAAqB,GAAC,CAACC,aAAD,EAAeC,WAAf,KAA6B;AAC9D,QAAMC,aAAa,GAACtB,SAAS,CAACuB,UAAV,CAAqBH,aAArB,CAApB,CAD8D,CAE9D;;AACA,QAAMI,KAAK,GAACpC,QAAQ,CAACoC,KAAT,EAAZ;AACAH,EAAAA,WAAW,CAACI,OAAZ,CAAoBC,GAAG,IAAG;AACxB,UAAMC,SAAS,GAACL,aAAa,CAACjB,GAAd,EAAhB;AACAmB,IAAAA,KAAK,CAACV,GAAN,CAAUa,SAAV;AACD,GAHD;AAKD,CATM;AAWP,MAAMC,QAAQ,GAAC,IAAIxC,QAAQ,CAACW,IAAT,CAAc8B,kBAAlB,EAAf;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAACC,EAAAA,MAAM,EAAC;AAAR,CAA7B;AAAwD;;AACxD,OAAO,MAAMC,gBAAgB,GAAC,MAAIjC,IAAI,CAACkC,eAAL,CAAqBL,QAArB,CAA3B;AAEP,eAAexC,QAAf","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\n\r\nconst config=\r\n    {\r\n        apiKey: \"AIzaSyCYrxCh-TEgeMFq3tXS6LlzxHEpOPVzDjE\",\r\n        authDomain: \"lionfashion.firebaseapp.com\",\r\n        databaseURL: \"https://lionfashion.firebaseio.com\",\r\n        projectId: \"lionfashion\",\r\n        storageBucket: \"lionfashion.appspot.com\",\r\n        messagingSenderId: \"810178059008\",\r\n        appId: \"1:810178059008:web:30157209dc7828c46331e5\",\r\n        measurementId: \"G-3M9KYVZE7X\"\r\n      };\r\n\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const auth=firebase.auth();\r\nexport const firestore=firebase.firestore();\r\n\r\nexport const createUserProfileDocument=async (userAuth,additionalData)=>{\r\n  if (!userAuth)return;\r\n\r\n  /*query inside firestore to see if already exist*/\r\n  /*firebase will always return us a reference object and snapshot object even if nothing exists there*/\r\n  const userRef=firestore.doc(`users/${userAuth.uid}`);\r\n  const snapshot=await userRef.get();\r\n\r\n  if(!snapshot.exists){\r\n    const {displayName,email}=userAuth;\r\n    const createdAt=new Date();\r\n\r\n    try{\r\n\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalData\r\n\r\n      })\r\n    }catch(error){\r\n      console.log(\"error creating user\",error.message);\r\n\r\n    }\r\n  }\r\n  return userRef;\r\n\r\n};\r\n\r\nexport const addCollectionAndItems=(collectionKey,objectToAdd)=>{\r\n  const collectionRef=firestore.collection(collectionKey);\r\n  //batch write\r\n  const batch=firebase.batch();\r\n  objectToAdd.forEach(obj =>{\r\n    const newDocRef=collectionRef.doc();\r\n    batch.set(newDocRef)\r\n  })\r\n\r\n}\r\n\r\nconst provider=new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({prompt:'select_account'}) /*trigger google popup*/\r\nexport const signInWithGoogle=()=>auth.signInWithPopup(provider);\r\n\r\nexport default firebase;"]},"metadata":{},"sourceType":"module"}